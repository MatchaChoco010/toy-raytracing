#version 460
#extension GL_EXT_nonuniform_qualifier : enable

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba32f) uniform readonly image2D inputImages[];
layout(set = 0, binding = 0, rgba8) uniform writeonly image2D outputImages[];

layout(push_constant) uniform PushConstants {
  uint sampleCount;
  uint inputIndex;
  uint outputIndex;
  float lWhite;
}
pushConstants;

vec3 reinhardToneMapping(vec3 color) {
  return color / (color + vec3(1.0)) *
         (1 + color / (pushConstants.lWhite * pushConstants.lWhite));
}

vec3 gammaCorrection(vec3 color) { return pow(color, vec3(1.0 / 2.2)); }

void main() {
  ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
  ivec2 dimensions = imageSize(inputImages[pushConstants.inputIndex]);
  if (pixel_coords.x >= dimensions.x || pixel_coords.y >= dimensions.y) {
    return;
  }

  // Flip the image vertically.
  ivec2 load_coords = ivec2(pixel_coords.x, dimensions.y - pixel_coords.y - 1);

  // divide color by sample count
  vec3 color =
      imageLoad(inputImages[pushConstants.inputIndex], load_coords).rgb;
  if (pushConstants.sampleCount > 1) {
    color /= pushConstants.sampleCount;
  }

  // store the result
  imageStore(outputImages[pushConstants.outputIndex], pixel_coords,
             vec4(gammaCorrection(reinhardToneMapping(color)), 1.0));
}
