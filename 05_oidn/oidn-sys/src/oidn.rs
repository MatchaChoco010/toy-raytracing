/* automatically generated by rust-bindgen 0.69.2 */

pub const OIDN_VERSION_MAJOR: u32 = 2;
pub const OIDN_VERSION_MINOR: u32 = 1;
pub const OIDN_VERSION_PATCH: u32 = 0;
pub const OIDN_VERSION: u32 = 20100;
pub const OIDN_VERSION_STRING: &[u8; 6] = b"2.1.0\0";
pub const OIDN_UUID_SIZE: u32 = 16;
pub const OIDN_LUID_SIZE: u32 = 8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUstream_st {
    _unused: [u8; 0],
}
pub type cudaStream_t = *mut CUstream_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ihipStream_t {
    _unused: [u8; 0],
}
pub type hipStream_t = *mut ihipStream_t;
extern "C" {
    pub fn oidnGetNumPhysicalDevices() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn oidnGetPhysicalDeviceBool(
        physicalDeviceID: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn oidnGetPhysicalDeviceInt(
        physicalDeviceID: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn oidnGetPhysicalDeviceString(
        physicalDeviceID: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn oidnGetPhysicalDeviceData(
        physicalDeviceID: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        byteSize: *mut usize,
    ) -> *const ::std::os::raw::c_void;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OIDNDeviceType {
    OIDN_DEVICE_TYPE_DEFAULT = 0,
    OIDN_DEVICE_TYPE_CPU = 1,
    OIDN_DEVICE_TYPE_SYCL = 2,
    OIDN_DEVICE_TYPE_CUDA = 3,
    OIDN_DEVICE_TYPE_HIP = 4,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OIDNError {
    OIDN_ERROR_NONE = 0,
    OIDN_ERROR_UNKNOWN = 1,
    OIDN_ERROR_INVALID_ARGUMENT = 2,
    OIDN_ERROR_INVALID_OPERATION = 3,
    OIDN_ERROR_OUT_OF_MEMORY = 4,
    OIDN_ERROR_UNSUPPORTED_HARDWARE = 5,
    OIDN_ERROR_CANCELLED = 6,
}
pub type OIDNErrorFunction = ::std::option::Option<
    unsafe extern "C" fn(
        userPtr: *mut ::std::os::raw::c_void,
        code: OIDNError,
        message: *const ::std::os::raw::c_char,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OIDNDeviceImpl {
    _unused: [u8; 0],
}
pub type OIDNDevice = *mut OIDNDeviceImpl;
extern "C" {
    pub fn oidnNewDevice(type_: OIDNDeviceType) -> OIDNDevice;
}
extern "C" {
    pub fn oidnNewDeviceByID(physicalDeviceID: ::std::os::raw::c_int) -> OIDNDevice;
}
extern "C" {
    pub fn oidnNewDeviceByUUID(uuid: *const ::std::os::raw::c_void) -> OIDNDevice;
}
extern "C" {
    pub fn oidnNewDeviceByLUID(luid: *const ::std::os::raw::c_void) -> OIDNDevice;
}
extern "C" {
    pub fn oidnNewDeviceByPCIAddress(
        pciDomain: ::std::os::raw::c_int,
        pciBus: ::std::os::raw::c_int,
        pciDevice: ::std::os::raw::c_int,
        pciFunction: ::std::os::raw::c_int,
    ) -> OIDNDevice;
}
extern "C" {
    pub fn oidnNewCUDADevice(
        deviceIDs: *const ::std::os::raw::c_int,
        streams: *const cudaStream_t,
        numPairs: ::std::os::raw::c_int,
    ) -> OIDNDevice;
}
extern "C" {
    pub fn oidnNewHIPDevice(
        deviceIDs: *const ::std::os::raw::c_int,
        streams: *const hipStream_t,
        numPairs: ::std::os::raw::c_int,
    ) -> OIDNDevice;
}
extern "C" {
    pub fn oidnRetainDevice(device: OIDNDevice);
}
extern "C" {
    pub fn oidnReleaseDevice(device: OIDNDevice);
}
extern "C" {
    pub fn oidnSetDeviceBool(device: OIDNDevice, name: *const ::std::os::raw::c_char, value: bool);
}
extern "C" {
    pub fn oidnSetDeviceInt(
        device: OIDNDevice,
        name: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn oidnGetDeviceBool(device: OIDNDevice, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn oidnGetDeviceInt(
        device: OIDNDevice,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn oidnSetDeviceErrorFunction(
        device: OIDNDevice,
        func: OIDNErrorFunction,
        userPtr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn oidnGetDeviceError(
        device: OIDNDevice,
        outMessage: *mut *const ::std::os::raw::c_char,
    ) -> OIDNError;
}
extern "C" {
    pub fn oidnCommitDevice(device: OIDNDevice);
}
extern "C" {
    pub fn oidnSyncDevice(device: OIDNDevice);
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OIDNFormat {
    OIDN_FORMAT_UNDEFINED = 0,
    OIDN_FORMAT_FLOAT = 1,
    OIDN_FORMAT_FLOAT2 = 2,
    OIDN_FORMAT_FLOAT3 = 3,
    OIDN_FORMAT_FLOAT4 = 4,
    OIDN_FORMAT_HALF = 257,
    OIDN_FORMAT_HALF2 = 258,
    OIDN_FORMAT_HALF3 = 259,
    OIDN_FORMAT_HALF4 = 260,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OIDNStorage {
    OIDN_STORAGE_UNDEFINED = 0,
    OIDN_STORAGE_HOST = 1,
    OIDN_STORAGE_DEVICE = 2,
    OIDN_STORAGE_MANAGED = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OIDNExternalMemoryTypeFlag {
    OIDN_EXTERNAL_MEMORY_TYPE_FLAG_NONE = 0,
    OIDN_EXTERNAL_MEMORY_TYPE_FLAG_OPAQUE_FD = 1,
    OIDN_EXTERNAL_MEMORY_TYPE_FLAG_DMA_BUF = 2,
    OIDN_EXTERNAL_MEMORY_TYPE_FLAG_OPAQUE_WIN32 = 4,
    OIDN_EXTERNAL_MEMORY_TYPE_FLAG_OPAQUE_WIN32_KMT = 8,
    OIDN_EXTERNAL_MEMORY_TYPE_FLAG_D3D11_TEXTURE = 16,
    OIDN_EXTERNAL_MEMORY_TYPE_FLAG_D3D11_TEXTURE_KMT = 32,
    OIDN_EXTERNAL_MEMORY_TYPE_FLAG_D3D11_RESOURCE = 64,
    OIDN_EXTERNAL_MEMORY_TYPE_FLAG_D3D11_RESOURCE_KMT = 128,
    OIDN_EXTERNAL_MEMORY_TYPE_FLAG_D3D12_HEAP = 256,
    OIDN_EXTERNAL_MEMORY_TYPE_FLAG_D3D12_RESOURCE = 512,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OIDNBufferImpl {
    _unused: [u8; 0],
}
pub type OIDNBuffer = *mut OIDNBufferImpl;
extern "C" {
    pub fn oidnNewBuffer(device: OIDNDevice, byteSize: usize) -> OIDNBuffer;
}
extern "C" {
    pub fn oidnNewBufferWithStorage(
        device: OIDNDevice,
        byteSize: usize,
        storage: OIDNStorage,
    ) -> OIDNBuffer;
}
extern "C" {
    pub fn oidnNewSharedBuffer(
        device: OIDNDevice,
        devPtr: *mut ::std::os::raw::c_void,
        byteSize: usize,
    ) -> OIDNBuffer;
}
extern "C" {
    pub fn oidnNewSharedBufferFromFD(
        device: OIDNDevice,
        fdType: OIDNExternalMemoryTypeFlag,
        fd: ::std::os::raw::c_int,
        byteSize: usize,
    ) -> OIDNBuffer;
}
extern "C" {
    pub fn oidnNewSharedBufferFromWin32Handle(
        device: OIDNDevice,
        handleType: OIDNExternalMemoryTypeFlag,
        handle: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_void,
        byteSize: usize,
    ) -> OIDNBuffer;
}
extern "C" {
    pub fn oidnGetBufferSize(buffer: OIDNBuffer) -> usize;
}
extern "C" {
    pub fn oidnGetBufferStorage(buffer: OIDNBuffer) -> OIDNStorage;
}
extern "C" {
    pub fn oidnGetBufferData(buffer: OIDNBuffer) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn oidnReadBuffer(
        buffer: OIDNBuffer,
        byteOffset: usize,
        byteSize: usize,
        dstHostPtr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn oidnReadBufferAsync(
        buffer: OIDNBuffer,
        byteOffset: usize,
        byteSize: usize,
        dstHostPtr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn oidnWriteBuffer(
        buffer: OIDNBuffer,
        byteOffset: usize,
        byteSize: usize,
        srcHostPtr: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn oidnWriteBufferAsync(
        buffer: OIDNBuffer,
        byteOffset: usize,
        byteSize: usize,
        srcHostPtr: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn oidnRetainBuffer(buffer: OIDNBuffer);
}
extern "C" {
    pub fn oidnReleaseBuffer(buffer: OIDNBuffer);
}
pub type OIDNProgressMonitorFunction = ::std::option::Option<
    unsafe extern "C" fn(userPtr: *mut ::std::os::raw::c_void, n: f64) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OIDNFilterImpl {
    _unused: [u8; 0],
}
pub type OIDNFilter = *mut OIDNFilterImpl;
extern "C" {
    pub fn oidnNewFilter(device: OIDNDevice, type_: *const ::std::os::raw::c_char) -> OIDNFilter;
}
extern "C" {
    pub fn oidnRetainFilter(filter: OIDNFilter);
}
extern "C" {
    pub fn oidnReleaseFilter(filter: OIDNFilter);
}
extern "C" {
    pub fn oidnSetFilterImage(
        filter: OIDNFilter,
        name: *const ::std::os::raw::c_char,
        buffer: OIDNBuffer,
        format: OIDNFormat,
        width: usize,
        height: usize,
        byteOffset: usize,
        pixelByteStride: usize,
        rowByteStride: usize,
    );
}
extern "C" {
    pub fn oidnSetSharedFilterImage(
        filter: OIDNFilter,
        name: *const ::std::os::raw::c_char,
        devPtr: *mut ::std::os::raw::c_void,
        format: OIDNFormat,
        width: usize,
        height: usize,
        byteOffset: usize,
        pixelByteStride: usize,
        rowByteStride: usize,
    );
}
extern "C" {
    pub fn oidnUnsetFilterImage(filter: OIDNFilter, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn oidnSetSharedFilterData(
        filter: OIDNFilter,
        name: *const ::std::os::raw::c_char,
        hostPtr: *mut ::std::os::raw::c_void,
        byteSize: usize,
    );
}
extern "C" {
    pub fn oidnUpdateFilterData(filter: OIDNFilter, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn oidnUnsetFilterData(filter: OIDNFilter, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn oidnSetFilterBool(filter: OIDNFilter, name: *const ::std::os::raw::c_char, value: bool);
}
extern "C" {
    pub fn oidnGetFilterBool(filter: OIDNFilter, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn oidnSetFilterInt(
        filter: OIDNFilter,
        name: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn oidnGetFilterInt(
        filter: OIDNFilter,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn oidnSetFilterFloat(filter: OIDNFilter, name: *const ::std::os::raw::c_char, value: f32);
}
extern "C" {
    pub fn oidnGetFilterFloat(filter: OIDNFilter, name: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn oidnSetFilterProgressMonitorFunction(
        filter: OIDNFilter,
        func: OIDNProgressMonitorFunction,
        userPtr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn oidnCommitFilter(filter: OIDNFilter);
}
extern "C" {
    pub fn oidnExecuteFilter(filter: OIDNFilter);
}
extern "C" {
    pub fn oidnExecuteFilterAsync(filter: OIDNFilter);
}
