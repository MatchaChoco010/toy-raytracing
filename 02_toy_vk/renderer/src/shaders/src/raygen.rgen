#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable

#define PI 3.1415926535897932384626433832795

struct Material {
  vec3 color;
  uint ty;
};

struct Prd {
  Material material;
  uint miss;
  vec3 hitPosition;
  vec3 hitGeometryNormal;
  vec3 hitShadingNormal;
};

layout(location = 0) rayPayloadEXT Prd prd;

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;

layout(push_constant) uniform PushConstants {
  mat4 cameraRotate;
  vec3 cameraTranslate;
  uint seed;
  uint maxRecursionDepth;
  float lWhite;
  uint64_t padding2;
}
pushConstants;

uint seed;
uint PCGHash() {
  seed = seed * 747796405u + 2891336453u;
  uint state = seed;
  uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
  return (word >> 22u) ^ word;
}

float rnd1() { return PCGHash() / float(0xFFFFFFFFU); }

vec2 rnd2() { return vec2(rnd1(), rnd1()); }

vec3 cosineWeightedDirection(vec3 normal) {
  vec2 rnd = rnd2();
  float up = sqrt(rnd.x);
  float over = sqrt(1.0 - up * up);
  float around = rnd.y * 6.28318530718;
  vec3 u = normalize(abs(normal.x) < 0.999 ? cross(normal, vec3(1, 0, 0))
                                           : cross(normal, vec3(0, 1, 0)));
  vec3 v = cross(normal, u);
  return normalize(u * cos(around) * over + v * sin(around) * over +
                   normal * up);
}

vec3 reinhardToneMapping(vec3 color) {
  return color / (color + vec3(1.0)) *
         (1 + color / (pushConstants.lWhite * pushConstants.lWhite));
}

vec3 gammaCorrection(vec3 color) { return pow(color, vec3(1.0 / 2.2)); }

void main() {
  seed =
      pushConstants.seed +
      (gl_LaunchIDEXT.x + gl_LaunchSizeEXT.x * gl_LaunchIDEXT.y) * 0x12345678u;

  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  vec2 delta = rnd2() - vec2(0.5);
  vec2 inUV = (pixelCenter + delta) / vec2(gl_LaunchSizeEXT.xy);
  vec2 d = inUV * 2.0 - 1.0;
  d.x *= float(gl_LaunchSizeEXT.x) / float(gl_LaunchSizeEXT.y);

  vec3 origin = pushConstants.cameraTranslate;
  vec3 direction = normalize(vec3(d.x, d.y, -2.0));
  direction = (pushConstants.cameraRotate * vec4(direction, 0.0)).xyz;
  float tmin = 0.001;
  float tmax = 100000.0;

  uint depth = 0;
  vec3 light = vec3(0.0);
  vec3 attenuation = vec3(1.0);

  prd.miss = 0;
  while (true) {
    traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT,
                0xff, // mask
                0,    // sbtRecordOffset
                0,    // sbtRecordStride
                0,    // missIndex
                origin, tmin, direction, tmax,
                0 // payload location
    );

    depth++;
    if (prd.miss == 1 || depth > pushConstants.maxRecursionDepth) {
      break;
    }

    Material material = prd.material;
    if (material.ty == 0) {
      // Lambert
      float russianRouletteProbability =
          max(material.color.r, max(material.color.g, material.color.b));
      if (rnd1() > russianRouletteProbability) {
        break;
      }

      origin = prd.hitPosition;
      direction = cosineWeightedDirection(prd.hitGeometryNormal);
      float pdf = dot(direction, prd.hitGeometryNormal) / PI;

      vec3 brdf = material.color / PI;

      attenuation *= brdf * max(dot(prd.hitShadingNormal, direction), 0) / pdf /
                     russianRouletteProbability;
      light += attenuation * vec3(0.0); // emissive項は0
    } else if (material.ty == 1) {
      // Emissive
      vec3 emission = material.color;
      light += attenuation * emission;
      break;
    } else {
      // Glass
      vec3 normal = prd.hitGeometryNormal;
      bool frontHit = dot(normal, direction) < 0;

      float n1 = 1.0;
      float n2 = 1.45;
      if (!frontHit) {
        float tmp = n1;
        n1 = n2;
        n2 = tmp;
        normal = -normal;
      }

      vec3 refractDirection = refract(direction, normal, n1 / n2);
      vec3 reflectDirection = reflect(direction, normal);

      bool isTotalInternalReflection =
          (1.0 - (n1 / n2) * (n1 / n2) *
                     (1.0 - dot(normal, direction) * dot(normal, direction))) <
          0;
      if (isTotalInternalReflection) {
        origin = prd.hitPosition;
        direction = reflectDirection;
        attenuation *= vec3(1.0);
        light += attenuation * vec3(0.0);
      } else {
        float cosThetaI = dot(normal, direction);
        float cosThetaO = dot(normal, refractDirection);
        float rhoS = (n1 * cosThetaI - n2 * cosThetaO) /
                     (n1 * cosThetaI + n2 * cosThetaO);
        float rhoP = (n1 * cosThetaO - n2 * cosThetaI) /
                     (n1 * cosThetaO + n2 * cosThetaI);
        float fresnel = (rhoS * rhoS + rhoP * rhoP) / 2.0;

        if (rnd1() < fresnel) {
          origin = prd.hitPosition;
          direction = reflectDirection;
          attenuation *= vec3(1.0);
          light += attenuation * vec3(0.0);
        } else {
          origin = prd.hitPosition;
          direction = refractDirection;
          attenuation *= vec3(1.0);
          light += attenuation * vec3(0.0);
        }
      }
    }
  }

  vec3 rgb = gammaCorrection(reinhardToneMapping(light));

  vec4 prev = imageLoad(image, ivec2(gl_LaunchIDEXT.xy));
  imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(prev.rgb + rgb, 1.0));
}
